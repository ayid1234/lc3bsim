/*
    Name 1: Diya Shrawagi
    UTEID 1: ds54998
*/

/***************************************************************/
/*                                                             */
/*   LC-3b Simulator                                           */
/*                                                             */
/*   EE 460N                                                   */
/*   The University of Texas at Austin                         */
/*                                                             */
/***************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>

/***************************************************************/
/*                                                             */
/* Files:  ucode        Microprogram file                      */
/*         isaprogram   LC-3b machine language program file    */
/*                                                             */
/***************************************************************/

/***************************************************************/
/* These are the functions you'll have to write.               */
/***************************************************************/

void eval_micro_sequencer();
void cycle_memory();
void eval_bus_drivers();
void drive_bus();
void latch_datapath_values();

/***************************************************************/
/* A couple of useful definitions.                             */
/***************************************************************/
#define FALSE 0
#define TRUE  1

/***************************************************************/
/* Use this to avoid overflowing 16 bits on the bus.           */
/***************************************************************/
#define Low16bits(x) ((x) & 0xFFFF)

/***************************************************************/
/* Definition of the control store layout.                     */
/***************************************************************/
#define CONTROL_STORE_ROWS 64
#define INITIAL_STATE_NUMBER 18

/***************************************************************/
/* Definition of bit order in control store word.              */
/***************************************************************/
enum CS_BITS {                                                  
    IRD,
    BIRD,
    COND2, COND1, COND0,
    J5, J4, J3, J2, J1, J0,
    LD_MAR,
    LD_MDR,
    LD_IR,
    LD_BEN,
    LD_REG,
    LD_CC,
    LD_PC,
    GATE_PC,
    GATE_MDR,
    GATE_ALU,
    GATE_MARMUX,
    GATE_SHF,
    PCMUX1, PCMUX0,
    DRMUX1, DRMUX0,
    SR1MUX1, SR1MUX0,
    ADDR1MUX,
    ADDR2MUX1, ADDR2MUX0,
    MARMUX,
    ALUK1, ALUK0,
    MIO_EN,
    R_W,
    DATA_SIZE,
    LSHF1,
    LD_SP_TEMP,
    SP_TEMPMUX,
    RMUX1, RMUX0,
    LD_IEVEC,
    GATEIEVEC,
    VMUX1, VMUX0,
    LD_PSR,
    LD_PSR15,
    PSRMUX,
    GatePSR,
    GateVEC,
    PCMUX2,
    CONTROL_STORE_BITS
} CS_BITS;

/***************************************************************/
/* Functions to get at the control bits.                       */
/***************************************************************/
int GetIRD(int *x)           { return(x[IRD]); }
int GetBIRD(int *x)           { return(x[BIRD]); }
int GetCOND(int *x)          { return((x[COND2] << 2) + (x[COND1] << 1) + x[COND0]); }
int GetJ(int *x)             { return((x[J5] << 5) + (x[J4] << 4) +
				      (x[J3] << 3) + (x[J2] << 2) +
				      (x[J1] << 1) + x[J0]); }
int GetLD_MAR(int *x)        { return(x[LD_MAR]); }
int GetLD_MDR(int *x)        { return(x[LD_MDR]); }
int GetLD_IR(int *x)         { return(x[LD_IR]); }
int GetLD_BEN(int *x)        { return(x[LD_BEN]); }
int GetLD_REG(int *x)        { return(x[LD_REG]); }
int GetLD_CC(int *x)         { return(x[LD_CC]); }
int GetLD_PC(int *x)         { return(x[LD_PC]); }
int GetGATE_PC(int *x)       { return(x[GATE_PC]); }
int GetGATE_MDR(int *x)      { return(x[GATE_MDR]); }
int GetGATE_ALU(int *x)      { return(x[GATE_ALU]); }
int GetGATE_MARMUX(int *x)   { return(x[GATE_MARMUX]); }
int GetGATE_SHF(int *x)      { return(x[GATE_SHF]); }
int GetPCMUX(int *x)         { return((x[PCMUX1] << 1) + x[PCMUX0]); }
int GetDRMUX(int *x)         { return((x[DRMUX1] << 1) + x[DRMUX0]); }
int GetSR1MUX(int *x)        { return((x[SR1MUX1] << 1) + x[SR1MUX0]); }
int GetADDR1MUX(int *x)      { return(x[ADDR1MUX]); }
int GetADDR2MUX(int *x)      { return((x[ADDR2MUX1] << 1) + x[ADDR2MUX0]); }
int GetMARMUX(int *x)        { return(x[MARMUX]); }
int GetALUK(int *x)          { return((x[ALUK1] << 1) + x[ALUK0]); }
int GetMIO_EN(int *x)        { return(x[MIO_EN]); }
int GetR_W(int *x)           { return(x[R_W]); }
int GetDATA_SIZE(int *x)     { return(x[DATA_SIZE]); } 
int GetLSHF1(int *x)         { return(x[LSHF1]); }
int GetLD_SP_TEMP(int *x)    { return(x[LD_SP_TEMP]); }
int GetSP_TEMPMUX(int *x)   { return(x[SP_TEMPMUX]); }
int GetRMUX(int *x)          { return((x[RMUX1] << 1) + x[RMUX0]); }
int GetLD_IEVEC(int *x)      { return(x[LD_IEVEC]); }
int GetGATEIEVEC(int *x)     { return(x[GATEIEVEC]); }
int GetVMUX(int *x)          { return((x[VMUX1] << 1) + x[VMUX0]); }
int GetLD_PSR(int *x)        { return(x[LD_PSR]); }
int GetLD_PSR15(int *x)      { return(x[LD_PSR15]); }
int GetPSRMUX(int *x)        { return(x[PSRMUX]); }
int GetGatePSR(int *x)       { return(x[GatePSR]); }
int GetGateVEC(int *x)       { return(x[GateVEC]); }
int GetPCMUX2(int *x)        { return(x[PCMUX2]); }

/***************************************************************/
/* The control store rom.                                      */
/***************************************************************/
int CONTROL_STORE[CONTROL_STORE_ROWS][CONTROL_STORE_BITS];

/***************************************************************/
/* Main memory.                                                */
/***************************************************************/
/* MEMORY[A][0] stores the least significant byte of word at word address A
   MEMORY[A][1] stores the most significant byte of word at word address A 
   There are two write enable signals, one for each byte. WE0 is used for 
   the least significant byte of a word. WE1 is used for the most significant 
   byte of a word. */

#define WORDS_IN_MEM    0x08000 
#define MEM_CYCLES      5
int MEMORY[WORDS_IN_MEM][2];

/***************************************************************/
int MEMEN = 0;
/***************************************************************/

/***************************************************************/
/* LC-3b State info.                                           */
/***************************************************************/
#define LC_3b_REGS 8

int RUN_BIT;	/* run bit */
int BUS;	/* value of the bus */

typedef struct System_Latches_Struct{

int PC,		/* program counter */
    MDR,	/* memory data register */
    MAR,	/* memory address register */
    IR,		/* instruction register */
    N,		/* n condition bit */
    Z,		/* z condition bit */
    P,		/* p condition bit */
    BEN;        /* ben register */

int READY;	/* ready bit */
  /* The ready bit is also latched as you dont want the memory system to assert it 
     at a bad point in the cycle*/

int REGS[LC_3b_REGS]; /* register file. */

int MICROINSTRUCTION[CONTROL_STORE_BITS]; /* The microintruction */

int STATE_NUMBER; /* Current State Number - Provided for debugging */ 

/* For lab 4 */
//int INTV; /* Interrupt vector register */
//int EXCV; /* Exception vector register */
int IEVEC; /*Interrupt and exception vector register*/
int SSP; /* Initial value of system stack pointer */
/* MODIFY: You may add system latches that are required by your implementation */
int MEMV;
int UNAL;
int INTERRUPT;
int PSR;
} System_Latches;

/* Data Structure for Latch */

System_Latches CURRENT_LATCHES, NEXT_LATCHES;

/***************************************************************/
/* A cycle counter.                                            */
/***************************************************************/
int CYCLE_COUNT;

/***************************************************************/
/*                                                             */
/* Procedure : help                                            */
/*                                                             */
/* Purpose   : Print out a list of commands.                   */
/*                                                             */
/***************************************************************/
void help() {                                                    
    printf("----------------LC-3bSIM Help-------------------------\n");
    printf("go               -  run program to completion       \n");
    printf("run n            -  execute program for n cycles    \n");
    printf("mdump low high   -  dump memory from low to high    \n");
    printf("rdump            -  dump the register & bus values  \n");
    printf("?                -  display this help menu          \n");
    printf("quit             -  exit the program                \n\n");
}

/***************************************************************/
/*                                                             */
/* Procedure : cycle                                           */
/*                                                             */
/* Purpose   : Execute a cycle                                 */
/*                                                             */
/***************************************************************/
void cycle() {  

  if(CYCLE_COUNT == 299) {
    NEXT_LATCHES.INTERRUPT = 1;
  }                                          

  eval_micro_sequencer();   
  cycle_memory();
  eval_bus_drivers();
  drive_bus();
  latch_datapath_values();

  CURRENT_LATCHES = NEXT_LATCHES;

  CYCLE_COUNT++;
}

/***************************************************************/
/*                                                             */
/* Procedure : run n                                           */
/*                                                             */
/* Purpose   : Simulate the LC-3b for n cycles.                 */
/*                                                             */
/***************************************************************/
void run(int num_cycles) {                                      
    int i;

    if (RUN_BIT == FALSE) {
	printf("Can't simulate, Simulator is halted\n\n");
	return;
    }

    printf("Simulating for %d cycles...\n\n", num_cycles);
    for (i = 0; i < num_cycles; i++) {
	if (CURRENT_LATCHES.PC == 0x0000) {
	    RUN_BIT = FALSE;
	    printf("Simulator halted\n\n");
	    break;
	}
	cycle();
    }
}

/***************************************************************/
/*                                                             */
/* Procedure : go                                              */
/*                                                             */
/* Purpose   : Simulate the LC-3b until HALTed.                 */
/*                                                             */
/***************************************************************/
void go() {                                                     
    if (RUN_BIT == FALSE) {
	printf("Can't simulate, Simulator is halted\n\n");
	return;
    }

    printf("Simulating...\n\n");
    while (CURRENT_LATCHES.PC != 0x0000)
	cycle();
    RUN_BIT = FALSE;
    printf("Simulator halted\n\n");
}

/***************************************************************/ 
/*                                                             */
/* Procedure : mdump                                           */
/*                                                             */
/* Purpose   : Dump a word-aligned region of memory to the     */
/*             output file.                                    */
/*                                                             */
/***************************************************************/
void mdump(FILE * dumpsim_file, int start, int stop) {          
    int address; /* this is a byte address */

    printf("\nMemory content [0x%.4x..0x%.4x] :\n", start, stop);
    printf("-------------------------------------\n");
    for (address = (start >> 1); address <= (stop >> 1); address++)
	printf("  0x%.4x (%d) : 0x%.2x%.2x\n", address << 1, address << 1, MEMORY[address][1], MEMORY[address][0]);
    printf("\n");

    /* dump the memory contents into the dumpsim file */
    fprintf(dumpsim_file, "\nMemory content [0x%.4x..0x%.4x] :\n", start, stop);
    fprintf(dumpsim_file, "-------------------------------------\n");
    for (address = (start >> 1); address <= (stop >> 1); address++)
	fprintf(dumpsim_file, " 0x%.4x (%d) : 0x%.2x%.2x\n", address << 1, address << 1, MEMORY[address][1], MEMORY[address][0]);
    fprintf(dumpsim_file, "\n");
    fflush(dumpsim_file);
}

/***************************************************************/
/*                                                             */
/* Procedure : rdump                                           */
/*                                                             */
/* Purpose   : Dump current register and bus values to the     */   
/*             output file.                                    */
/*                                                             */
/***************************************************************/
void rdump(FILE * dumpsim_file) {                               
    int k; 

    printf("\nCurrent register/bus values :\n");
    printf("-------------------------------------\n");
    printf("Cycle Count  : %d\n", CYCLE_COUNT);
    printf("PC           : 0x%.4x\n", CURRENT_LATCHES.PC);
    printf("IR           : 0x%.4x\n", CURRENT_LATCHES.IR);
    printf("STATE_NUMBER : 0x%.4x\n\n", CURRENT_LATCHES.STATE_NUMBER);
    printf("BUS          : 0x%.4x\n", BUS);
    printf("MDR          : 0x%.4x\n", CURRENT_LATCHES.MDR);
    printf("MAR          : 0x%.4x\n", CURRENT_LATCHES.MAR);
    printf("CCs: N = %d  Z = %d  P = %d\n", CURRENT_LATCHES.N, CURRENT_LATCHES.Z, CURRENT_LATCHES.P);
    printf("Registers:\n");
    for (k = 0; k < LC_3b_REGS; k++)
	printf("%d: 0x%.4x\n", k, CURRENT_LATCHES.REGS[k]);
    printf("\n");

    /* dump the state information into the dumpsim file */
    fprintf(dumpsim_file, "\nCurrent register/bus values :\n");
    fprintf(dumpsim_file, "-------------------------------------\n");
    fprintf(dumpsim_file, "Cycle Count  : %d\n", CYCLE_COUNT);
    fprintf(dumpsim_file, "PC           : 0x%.4x\n", CURRENT_LATCHES.PC);
    fprintf(dumpsim_file, "IR           : 0x%.4x\n", CURRENT_LATCHES.IR);
    fprintf(dumpsim_file, "STATE_NUMBER : 0x%.4x\n\n", CURRENT_LATCHES.STATE_NUMBER);
    fprintf(dumpsim_file, "BUS          : 0x%.4x\n", BUS);
    fprintf(dumpsim_file, "MDR          : 0x%.4x\n", CURRENT_LATCHES.MDR);
    fprintf(dumpsim_file, "MAR          : 0x%.4x\n", CURRENT_LATCHES.MAR);
    fprintf(dumpsim_file, "CCs: N = %d  Z = %d  P = %d\n", CURRENT_LATCHES.N, CURRENT_LATCHES.Z, CURRENT_LATCHES.P);
    fprintf(dumpsim_file, "Registers:\n");
    for (k = 0; k < LC_3b_REGS; k++)
	fprintf(dumpsim_file, "%d: 0x%.4x\n", k, CURRENT_LATCHES.REGS[k]);
    fprintf(dumpsim_file, "\n");
    fflush(dumpsim_file);
}

/***************************************************************/
/*                                                             */
/* Procedure : get_command                                     */
/*                                                             */
/* Purpose   : Read a command from standard input.             */  
/*                                                             */
/***************************************************************/
void get_command(FILE * dumpsim_file) {                         
    char buffer[20];
    int start, stop, cycles;

    printf("LC-3b-SIM> ");

    scanf("%s", buffer);
    printf("\n");

    switch(buffer[0]) {
    case 'G':
    case 'g':
	go();
	break;

    case 'M':
    case 'm':
	scanf("%i %i", &start, &stop);
	mdump(dumpsim_file, start, stop);
	break;

    case '?':
	help();
	break;
    case 'Q':
    case 'q':
	printf("Bye.\n");
	exit(0);

    case 'R':
    case 'r':
	if (buffer[1] == 'd' || buffer[1] == 'D')
	    rdump(dumpsim_file);
	else {
	    scanf("%d", &cycles);
	    run(cycles);
	}
	break;

    default:
	printf("Invalid Command\n");
	break;
    }
}

/***************************************************************/
/*                                                             */
/* Procedure : init_control_store                              */
/*                                                             */
/* Purpose   : Load microprogram into control store ROM        */ 
/*                                                             */
/***************************************************************/
void init_control_store(char *ucode_filename) {                 
    FILE *ucode;
    int i, j, index;
    char line[200];

    printf("Loading Control Store from file: %s\n", ucode_filename);

    /* Open the micro-code file. */
    if ((ucode = fopen(ucode_filename, "r")) == NULL) {
	printf("Error: Can't open micro-code file %s\n", ucode_filename);
	exit(-1);
    }

    /* Read a line for each row in the control store. */
    for(i = 0; i < CONTROL_STORE_ROWS; i++) {
	if (fscanf(ucode, "%[^\n]\n", line) == EOF) {
	    printf("Error: Too few lines (%d) in micro-code file: %s\n",
		   i, ucode_filename);
	    exit(-1);
	}

	/* Put in bits one at a time. */
	index = 0;

	for (j = 0; j < CONTROL_STORE_BITS; j++) {
	    /* Needs to find enough bits in line. */
	    if (line[index] == '\0') {
		printf("Error: Too few control bits in micro-code file: %s\nLine: %d\n",
		       ucode_filename, i);
		exit(-1);
	    }
	    if (line[index] != '0' && line[index] != '1') {
		printf("Error: Unknown value in micro-code file: %s\nLine: %d, Bit: %d\n",
		       ucode_filename, i, j);
		exit(-1);
	    }

	    /* Set the bit in the Control Store. */
	    CONTROL_STORE[i][j] = (line[index] == '0') ? 0:1;
	    index++;
	}

	/* Warn about extra bits in line. */
	if (line[index] != '\0')
	    printf("Warning: Extra bit(s) in control store file %s. Line: %d\n",
		   ucode_filename, i);
    }
    printf("\n");
}

/************************************************************/
/*                                                          */
/* Procedure : init_memory                                  */
/*                                                          */
/* Purpose   : Zero out the memory array                    */
/*                                                          */
/************************************************************/
void init_memory() {                                           
    int i;

    for (i=0; i < WORDS_IN_MEM; i++) {
	MEMORY[i][0] = 0;
	MEMORY[i][1] = 0;
    }
}

/**************************************************************/
/*                                                            */
/* Procedure : load_program                                   */
/*                                                            */
/* Purpose   : Load program and service routines into mem.    */
/*                                                            */
/**************************************************************/
void load_program(char *program_filename) {                   
    FILE * prog;
    int ii, word, program_base;

    /* Open program file. */
    prog = fopen(program_filename, "r");
    if (prog == NULL) {
	printf("Error: Can't open program file %s\n", program_filename);
	exit(-1);
    }

    /* Read in the program. */
    if (fscanf(prog, "%x\n", &word) != EOF)
	program_base = word >> 1;
    else {
	printf("Error: Program file is empty\n");
	exit(-1);
    }

    ii = 0;
    while (fscanf(prog, "%x\n", &word) != EOF) {
	/* Make sure it fits. */
	if (program_base + ii >= WORDS_IN_MEM) {
	    printf("Error: Program file %s is too long to fit in memory. %x\n",
		   program_filename, ii);
	    exit(-1);
	}

	/* Write the word to memory array. */
	MEMORY[program_base + ii][0] = word & 0x00FF;
	MEMORY[program_base + ii][1] = (word >> 8) & 0x00FF;
	ii++;
    }

    if (CURRENT_LATCHES.PC == 0) CURRENT_LATCHES.PC = (program_base << 1);

    printf("Read %d words from program into memory.\n\n", ii);
}

/***************************************************************/
/*                                                             */
/* Procedure : initialize                                      */
/*                                                             */
/* Purpose   : Load microprogram and machine language program  */ 
/*             and set up initial state of the machine.        */
/*                                                             */
/***************************************************************/
void initialize(char *ucode_filename, char *program_filename, int num_prog_files) { 
    int i;
    init_control_store(ucode_filename);

    init_memory();
    for ( i = 0; i < num_prog_files; i++ ) {
	load_program(program_filename);
	while(*program_filename++ != '\0');
    }
    CURRENT_LATCHES.Z = 1;
    CURRENT_LATCHES.STATE_NUMBER = INITIAL_STATE_NUMBER;
    CURRENT_LATCHES.PSR = 0x8002;
    CURRENT_LATCHES.SSP = 0x3000; //supervisor stack ptr
    memcpy(CURRENT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[INITIAL_STATE_NUMBER], sizeof(int)*CONTROL_STORE_BITS);

    NEXT_LATCHES = CURRENT_LATCHES;

    RUN_BIT = TRUE;
}

/***************************************************************/
/*                                                             */
/* Procedure : main                                            */
/*                                                             */
/***************************************************************/
int main(int argc, char *argv[]) {                              
    FILE * dumpsim_file;
       /* Error Checking */
    if (argc < 3) {
	printf("Error: usage: %s <micro_code_file> <program_file_1> <program_file_2> ...\n",
	       argv[0]);
	exit(1);
    }

    printf("LC-3b Simulator\n\n");

    initialize(argv[1], argv[2], argc - 2);


    if ( (dumpsim_file = fopen( "dumpsim", "w" )) == NULL ) {
	printf("Error: Can't open dumpsim file\n");
	exit(-1);
    }

    while (1)
	get_command(dumpsim_file);
}

/***************************************************************/
/* Do not modify the above code.
   You are allowed to use the following global variables in your
   code. These are defined above.

   CONTROL_STORE
   MEMORY
   BUS

   CURRENT_LATCHES
   NEXT_LATCHES

   You may define your own local/global variables and functions.
   You may use the functions to get at the control bits defined
   above.

   Begin your code here 	  			       */
/***************************************************************/

int twosComp(int x, int size) {
  int shift = 1;
  for(int i = 0; i < size - 1; i++) {
    shift *= 2;
  }
  if(x > (shift - 1)) {
    int y = -1 << size;
    return y | x;
  }
  else {
    return x;
  }
}

void eval_micro_sequencer() {

  /* 
   * Evaluate the address of the next state according to the 
   * micro sequencer logic. Latch the next microinstruction.
   */

  int ird = GetIRD(CURRENT_LATCHES.MICROINSTRUCTION);
  int bird = GetBIRD(CURRENT_LATCHES.MICROINSTRUCTION);
  int cond = GetCOND(CURRENT_LATCHES.MICROINSTRUCTION);
  int jbits = GetJ(CURRENT_LATCHES.MICROINSTRUCTION);

  if(ird == 0) {
    if(bird == 0) { //not opcode
        if(cond == 1) { //Ready
            if(CURRENT_LATCHES.READY == 1) {
                jbits = jbits | 0x02;
            }
        }
        else if(cond == 2) { //Branch
            if(CURRENT_LATCHES.BEN == 1) {
                jbits = jbits | 0x04;
            }
        }
        else if(cond == 3) { //Addr. Mode
            if((CURRENT_LATCHES.IR & 0x0800) > 0) {
                jbits = jbits | 0x01;
            }
        }
        else if(cond == 4) { //Interrupt
            if((CURRENT_LATCHES.INTERRUPT & ((CURRENT_LATCHES.PSR & 0x8000) >> 15)) == 1) {
                jbits = jbits | 0x08;
            }
        }
        else if(cond == 5) { //Protection
            if((CURRENT_LATCHES.MEMV & ((CURRENT_LATCHES.PSR & 0x8000) >> 15)) == 1) {
                jbits = jbits | 0x010;
            }
        }
        else if(cond == 6) { //Unaligned access
            if((CURRENT_LATCHES.UNAL & ((CURRENT_LATCHES.IR & 0x4000) >> 14)) == 1) {
                    jbits = jbits | 0x020;
            }
        }
    }
    else {
        jbits = jbits | (((0x03 << 4) | ((CURRENT_LATCHES.IR & 0xC000) >> 12)) | ((CURRENT_LATCHES.IR & 0x1000) >> 12));
    }
  }
    else {
        jbits = jbits | ((CURRENT_LATCHES.IR & 0xF000) >> 12);
    }
    NEXT_LATCHES.STATE_NUMBER = jbits;
    memcpy(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[jbits], sizeof(int)*CONTROL_STORE_BITS);
}


void cycle_memory() {
 
  /* 
   * This function emulates memory and the WE logic. 
   * Keep track of which cycle of MEMEN we are dealing with.  
   * If fourth, we need to latch Ready bit at the end of 
   * cycle to prepare microsequencer for the fifth cycle.  
   */
  NEXT_LATCHES.READY = 0;
  if(CURRENT_LATCHES.STATE_NUMBER == NEXT_LATCHES.STATE_NUMBER) {
    MEMEN++;
  }
  if(MEMEN == 4) {
    MEMEN = 0;
    NEXT_LATCHES.READY = 1;
  }

}



void eval_bus_drivers() {

  /* 
   * Datapath routine emulating operations before driving the bus.
   * Evaluate the input of tristate drivers 
   *         Gate_MARMUX,
   *		 Gate_PC,
   *		 Gate_ALU,
   *		 Gate_SHF,
   *		 Gate_MDR.
   */    

  int gateMM = GetGATE_MARMUX(CURRENT_LATCHES.MICROINSTRUCTION);
  int gatePC = GetGATE_PC(CURRENT_LATCHES.MICROINSTRUCTION);
  int gateALU = GetGATE_ALU(CURRENT_LATCHES.MICROINSTRUCTION);
  int gateSHF = GetGATE_SHF(CURRENT_LATCHES.MICROINSTRUCTION);
  int gateMDR = GetGATE_MDR(CURRENT_LATCHES.MICROINSTRUCTION);
  int gateIEVEC = GetGATEIEVEC(CURRENT_LATCHES.MICROINSTRUCTION);
  int gatePSR = GetGatePSR(CURRENT_LATCHES.MICROINSTRUCTION);
  int gateVEC = GetGateVEC(CURRENT_LATCHES.MICROINSTRUCTION);


  if(gateMM == 1) {
    int mm = GetMARMUX(CURRENT_LATCHES.MICROINSTRUCTION);
    if(mm == 0) { //select LSHF IR[7:0]
        mm = (CURRENT_LATCHES.IR & 0x0FF) << 1;
        BUS = mm;
    }
    else { //select adder output
        int addr2 = GetADDR2MUX(CURRENT_LATCHES.MICROINSTRUCTION);
        int addr1 = GetADDR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
        int lshf = GetLSHF1(CURRENT_LATCHES.MICROINSTRUCTION);
        if(addr2 == 0) { //select 0
            if(addr1 == 0) { //PC
                BUS = CURRENT_LATCHES.PC;
            }
            else { //BaseR
                int sr1 = GetSR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
                if(sr1 == 0) { //IR[11:9]
                    BUS = CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9];
                }
                else { //IR[8:6]
                    BUS = CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6];
                }
            }
        }
        else if(addr2 == 1) { //offset6
            if(addr1 == 0) { //PC
                if(lshf == 1) {
                    BUS = Low16bits(CURRENT_LATCHES.PC + (twosComp((CURRENT_LATCHES.IR & 0x003F), 6) << 1));
                }
                else {
                    BUS = Low16bits(CURRENT_LATCHES.PC + twosComp((CURRENT_LATCHES.IR & 0x003F), 6));

                }
            }
            else { //BaseR
                int sr1 = GetSR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
                if(sr1 == 0) { //IR[11:9]
                    if(lshf == 1) {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + (twosComp((CURRENT_LATCHES.IR & 0x003F), 6) << 1));
                    }
                    else {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + twosComp((CURRENT_LATCHES.IR & 0x003F), 6));
                    }
                }
                else { //IR[8:6]
                    if(lshf == 1) {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + (twosComp((CURRENT_LATCHES.IR & 0x003F), 6) << 1));
                    }
                    else {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + twosComp((CURRENT_LATCHES.IR & 0x003F), 6));
                    }  
                }
            }
        }
        else if(addr2 == 2) { //PCoffset9
            if(addr1 == 0) { //PC
                if(lshf == 1) {
                    BUS = Low16bits(CURRENT_LATCHES.PC + (twosComp((CURRENT_LATCHES.IR & 0x01FF), 9) << 1));
                }
                else {
                    BUS = Low16bits(CURRENT_LATCHES.PC + twosComp((CURRENT_LATCHES.IR & 0x01FF), 9));

                }
            }
            else { //BaseR
                int sr1 = GetSR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
                if(sr1 == 0) { //IR[11:9]
                    if(lshf == 1) {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + (twosComp((CURRENT_LATCHES.IR & 0x01FF), 9) << 1));
                    }
                    else {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + twosComp((CURRENT_LATCHES.IR & 0x01FF), 9));
                    }
                }
                else { //IR[8:6]
                    if(lshf == 1) {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + (twosComp((CURRENT_LATCHES.IR & 0x01FF), 9) << 1));
                    }
                    else {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + twosComp((CURRENT_LATCHES.IR & 0x01FF), 9));
                    }
                }
            }
        }
        else { //PCoffset11
            if(addr1 == 0) { //PC
                if(lshf == 1) {
                    BUS = Low16bits(CURRENT_LATCHES.PC + (twosComp((CURRENT_LATCHES.IR & 0x07FF), 11) << 1));
                }
                else {
                    BUS = Low16bits(CURRENT_LATCHES.PC + twosComp((CURRENT_LATCHES.IR & 0x07FF), 11));
                }
            }
            else { //BaseR
                int sr1 = GetSR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
                if(sr1 == 0) { //IR[11:9]
                    if(lshf == 1) {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + (twosComp((CURRENT_LATCHES.IR & 0x07FF), 11) << 1));
                    }
                    else {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + twosComp((CURRENT_LATCHES.IR & 0x07FF), 11));

                    }
                }
                else { //IR[8:6]
                    if(lshf == 1) {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + (twosComp((CURRENT_LATCHES.IR & 0x07FF), 11) << 1));
                    }
                    else {
                        BUS = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + twosComp((CURRENT_LATCHES.IR & 0x07FF), 11));
                    }
                }
            }
        }
    }
  }
  else if(gatePC == 1) {
        int pc2 = GetPCMUX2(CURRENT_LATCHES.MICROINSTRUCTION);
        if(pc2 == 0) {
            BUS = Low16bits(CURRENT_LATCHES.PC);
        }
        else {
            BUS = Low16bits(CURRENT_LATCHES.PC - 2);
        }
        
  }
  else if(gateALU == 1) {
        int aluk = GetALUK(CURRENT_LATCHES.MICROINSTRUCTION);
        int steer = CURRENT_LATCHES.IR & 0x020;
        int temp = 0;
        int sr1 = GetSR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
        if(sr1 == 2) {
            int r6 = GetRMUX(CURRENT_LATCHES.MICROINSTRUCTION);
            if(r6 == 0) { //r6
                temp = CURRENT_LATCHES.REGS[6];  
            }
            else if(r6 == 1) { //r6 - 2 or push
                temp = CURRENT_LATCHES.REGS[6] - 2;
            }
            else { //r6 + 2 or pop
                temp = CURRENT_LATCHES.REGS[6] + 2;
            }
        }
        if(aluk == 0) { //add
            if(sr1 == 0) { //IR[11:9]
                if(steer == 0) { //reg
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9], 16) + twosComp(CURRENT_LATCHES.REGS[(CURRENT_LATCHES.IR & 0x07)], 16);
                }
                else { //imm
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9], 16) + twosComp((CURRENT_LATCHES.IR & 0x01F), 5);
                }   
            }
            else if(sr1 == 1){ //IR[8:6]
                if(steer == 0) { //reg
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6], 16) + twosComp(CURRENT_LATCHES.REGS[(CURRENT_LATCHES.IR & 0x07)], 16);
                }
                else { //imm
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6], 16) + twosComp((CURRENT_LATCHES.IR & 0x01F), 5);
                }   
            }  
            BUS = Low16bits(temp);  
        }
        else if(aluk == 1) { //and
            if(sr1 == 0) { //IR[11:9]
                if(steer == 0) { //reg
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9], 16) & twosComp(CURRENT_LATCHES.REGS[(CURRENT_LATCHES.IR & 0x07)], 16);
                }
                else { //imm
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9], 16) & twosComp((CURRENT_LATCHES.IR & 0x01F), 5);
                }   
            }
            else if(sr1 == 1){ //IR[8:6]
                if(steer == 0) { //reg
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6], 16) & twosComp(CURRENT_LATCHES.REGS[(CURRENT_LATCHES.IR & 0x07)], 16);
                }
                else { //imm
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6], 16) & twosComp((CURRENT_LATCHES.IR & 0x01F), 5);
                }   
            }  
            BUS = Low16bits(temp);  
        }
        else if(aluk == 2) { //xor
            if(sr1 == 0) { //IR[11:9]
                if(steer == 0) { //reg
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9], 16) ^ twosComp(CURRENT_LATCHES.REGS[(CURRENT_LATCHES.IR & 0x07)], 16);
                }
                else { //imm
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9], 16) ^ twosComp((CURRENT_LATCHES.IR & 0x01F), 5);
                }   
            }
            else if(sr1 == 1) { //IR[8:6]
                if(steer == 0) { //reg
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6], 16) ^ twosComp(CURRENT_LATCHES.REGS[(CURRENT_LATCHES.IR & 0x07)], 16);
                }
                else { //imm
                    temp = twosComp(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6], 16) ^ twosComp((CURRENT_LATCHES.IR & 0x01F), 5);
                }   
            } 
            BUS = Low16bits(temp);  
        }
        else { //passa
            int sr1 = GetSR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
            if(sr1 == 0) { //IR[11:9]
                    BUS = CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9];
            }
            else if(sr1 == 1){ //IR[8:6]
                    BUS = CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6];
            }
            else {
                BUS = Low16bits(temp);
            }
        }
  }
  else if(gateSHF == 1) {
    int sr1 = GetSR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
    int shf = (CURRENT_LATCHES.IR & 0x030) >> 4;
    int amt4 = CURRENT_LATCHES.IR & 0x0F;
        if(sr1 == 0) { //IR[11:9]
                if(shf == 0) { //LSHF
                    int x = CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9];
                    x = x << amt4;
                    BUS = Low16bits(x);
                }
                else if(shf == 1) { //RSHFL
                    int x = CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9];
                    x = x >> amt4;
                    BUS = x;
                }
                else { //RSHFA
                    int temp = CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] & 0x8000;
                    if(temp == 0) {
                        int x = CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9];
                        x = x >> amt4;
                        BUS = x;
                    }
                    else {
                        int mask = 0x8000;
                        int shift = 0x8000;
                        for(int i = 0; i < amt4 - 1; i++) {
                            shift = shift >> 1;
                            mask = mask + shift;
                        }
                        int x = CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9];
                        x = x >> amt4;
                        x = x | mask;
                        BUS = Low16bits(x);
                    }
                }
        }
        else { //IR[8:6]
                 if(shf == 0) { //LSHF
                    int x = CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6];
                    x = x << amt4;
                    BUS = Low16bits(x);
                }
                else if(shf == 1) { //RSHFL
                    int x = CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6];
                    x = x >> amt4;
                    BUS = x;
                }
                else { //RSHFA
                    int temp = CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] & 0x8000;
                    if(temp == 0) {
                        int x = CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6];
                        x = x >> amt4;
                        BUS = x;
                    }
                    else {
                        int mask = 0x8000;
                        int shift = 0x8000;
                        for(int i = 0; i < amt4 - 1; i++) {
                            shift = shift >> 1;
                            mask = mask + shift;
                        }
                        int x = CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6];
                        x = x >> amt4;
                        x = x | mask;
                        BUS = Low16bits(x);
                    }
                }
        }
  }
  else if(gateMDR == 1) { //gateMDR
        int datasz = GetDATA_SIZE(CURRENT_LATCHES.MICROINSTRUCTION);
        int sb = CURRENT_LATCHES.MAR & 0x01;
        if(datasz == 0) { //BYTE
            if(sb == 0) { //lsb
                BUS = Low16bits(twosComp((CURRENT_LATCHES.MDR & 0x0FF), 8));
            }
            else { //msb
                BUS = Low16bits(twosComp((CURRENT_LATCHES.MDR & 0xFF00) >> 8, 8));
            }
        } 
        else { //WORD
            BUS = Low16bits(CURRENT_LATCHES.MDR);
        }
  }
  else if(gateIEVEC == 1) {
    BUS = Low16bits(CURRENT_LATCHES.IEVEC);
  }
  else if(gatePSR == 1) {
    BUS = Low16bits(CURRENT_LATCHES.PSR);
  } 
  else if(gateVEC == 1) {
    int v = GetVMUX(CURRENT_LATCHES.MICROINSTRUCTION);
    int temp = 0x0200;
    if(v == 0) {
        temp += (twosComp(0x01, 16) << 1);
        NEXT_LATCHES.INTERRUPT = 0;
    }
    else if(v == 1) {
        temp += (twosComp(0x02, 16) << 1);
    }
    else if(v == 2) {
        temp += (twosComp(0x03, 16) << 1);
    }
    else if(v == 3) {
        temp += (twosComp(0x04, 16) << 1);
    }
    BUS = Low16bits(temp);
  }
}


void drive_bus() {

  /* 
   * Datapath routine for driving the bus from one of the 5 possible 
   * tristate drivers. 
   */       

  int ldpc = GetLD_PC(CURRENT_LATCHES.MICROINSTRUCTION);
  int ldreg = GetLD_REG(CURRENT_LATCHES.MICROINSTRUCTION);
  int ldmar = GetLD_MAR(CURRENT_LATCHES.MICROINSTRUCTION);
  int ldmdr = GetLD_MDR(CURRENT_LATCHES.MICROINSTRUCTION);
  int ldir = GetLD_IR(CURRENT_LATCHES.MICROINSTRUCTION);
  int ldcc = GetLD_CC(CURRENT_LATCHES.MICROINSTRUCTION);
  int ldsptemp = GetLD_SP_TEMP(CURRENT_LATCHES.MICROINSTRUCTION);
  int ldievec = GetLD_IEVEC(CURRENT_LATCHES.MICROINSTRUCTION);
  int ldpsr = GetLD_PSR(CURRENT_LATCHES.MICROINSTRUCTION);
  int ldpsr15 = GetLD_PSR15(CURRENT_LATCHES.MICROINSTRUCTION);

  if(ldpc == 1) {
    int pcmux = GetPCMUX(CURRENT_LATCHES.MICROINSTRUCTION);
    if(pcmux == 0) { //pc+2
        NEXT_LATCHES.PC = CURRENT_LATCHES.PC + 2;
    }
    else if(pcmux == 1) { //bus
        NEXT_LATCHES.PC = BUS;
        if(BUS < 0x3000) {
        NEXT_LATCHES.MEMV = 1;
        }
        else {
            NEXT_LATCHES.MEMV = 0;
        }
    }
    else { //adder
        int addr2 = GetADDR2MUX(CURRENT_LATCHES.MICROINSTRUCTION);
        int addr1 = GetADDR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
        int lshf = GetLSHF1(CURRENT_LATCHES.MICROINSTRUCTION);
        if(addr2 == 0) { //select 0
            if(addr1 == 0) { //PC
                NEXT_LATCHES.PC = CURRENT_LATCHES.PC;
            }
            else { //BaseR
                int sr1 = GetSR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
                if(sr1 == 0) { //IR[11:9]
                    NEXT_LATCHES.PC = CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9];
                }
                else { //IR[8:6]
                    NEXT_LATCHES.PC = CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6];
                }
            }
        }
        else if(addr2 == 1) { //offset6
            if(addr1 == 0) { //PC
                if(lshf == 1) {
                    NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.PC + (twosComp((CURRENT_LATCHES.IR & 0x003F), 6) << 1));
                }
                else {
                    NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.PC + twosComp((CURRENT_LATCHES.IR & 0x003F), 6));
                }
            }
            else { //BaseR
                int sr1 = GetSR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
                if(sr1 == 0) { //IR[11:9]
                    if(lshf == 1) {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + (twosComp((CURRENT_LATCHES.IR & 0x003F), 6) << 1));
                    }
                    else {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + twosComp((CURRENT_LATCHES.IR & 0x003F), 6));
                    }
                }
                else { //IR[8:6]
                    if(lshf == 1) {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + (twosComp((CURRENT_LATCHES.IR & 0x003F), 6) << 1));
                    }
                    else {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + twosComp((CURRENT_LATCHES.IR & 0x003F), 6));
                    }
                }
            }
        }
        else if(addr2 == 2) { //PCoffset9
            if(addr1 == 0) { //PC
                if(lshf == 1) {
                    NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.PC + (twosComp((CURRENT_LATCHES.IR & 0x01FF), 9) << 1));
                }
                else {
                    NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.PC + twosComp((CURRENT_LATCHES.IR & 0x01FF), 9));
                }
            }
            else { //BaseR
                int sr1 = GetSR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
                if(sr1 == 0) { //IR[11:9]
                    if(lshf == 1) {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + (twosComp((CURRENT_LATCHES.IR & 0x01FF), 9) << 1));
                    }
                    else {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + twosComp((CURRENT_LATCHES.IR & 0x01FF), 9));

                    }
                }
                else { //IR[8:6]
                    if(lshf == 1) {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + (twosComp((CURRENT_LATCHES.IR & 0x01FF), 9) << 1));
                    }
                    else {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + twosComp((CURRENT_LATCHES.IR & 0x01FF), 9));
                    }                   
                }
            }
        }
        else { //PCoffset11
            if(addr1 == 0) { //PC
                if(lshf == 1) {
                    NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.PC + (twosComp((CURRENT_LATCHES.IR & 0x07FF), 11) << 1));
                }
                else {
                    NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.PC + twosComp((CURRENT_LATCHES.IR & 0x07FF), 11));
                }
            }
            else { //BaseR
                int sr1 = GetSR1MUX(CURRENT_LATCHES.MICROINSTRUCTION);
                if(sr1 == 0) { //IR[11:9]
                    if(lshf == 1) {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + (twosComp((CURRENT_LATCHES.IR & 0x07FF), 11) << 1));
                    }
                    else {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x0E00 & CURRENT_LATCHES.IR) >> 9] + twosComp((CURRENT_LATCHES.IR & 0x07FF), 11));

                    }
                }
                else { //IR[8:6]
                    if(lshf == 1) {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + (twosComp((CURRENT_LATCHES.IR & 0x07FF), 11) << 1));
                    }
                    else {
                        NEXT_LATCHES.PC = Low16bits(CURRENT_LATCHES.REGS[(0x01C0 & CURRENT_LATCHES.IR) >> 6] + twosComp((CURRENT_LATCHES.IR & 0x07FF), 11));
                    }
                }
            }
        }
        if(NEXT_LATCHES.PC < 0x3000) {
            NEXT_LATCHES.MEMV = 1;
        }
        else {
            NEXT_LATCHES.MEMV = 0;
        }
    }
  }
  if(ldreg == 1) {
    int drmux = GetDRMUX(CURRENT_LATCHES.MICROINSTRUCTION);
    if(drmux == 0) { //IR[11:9]
        int datasize = GetDATA_SIZE(CURRENT_LATCHES.MICROINSTRUCTION);
        int temp = twosComp(BUS, 16);
        if(ldcc == 1) {
            if(temp < 0) {
                NEXT_LATCHES.N = 1;
                NEXT_LATCHES.Z = 0;
                NEXT_LATCHES.P = 0;
            }
            else if(temp == 0) {
                NEXT_LATCHES.Z = 1;
                NEXT_LATCHES.N = 0;
                NEXT_LATCHES.P = 0;
            }
            else {
                NEXT_LATCHES.P = 1;
                NEXT_LATCHES.N = 0;
                NEXT_LATCHES.Z = 0;
            }
            NEXT_LATCHES.PSR = CURRENT_LATCHES.PSR & 0xFFF8;
            NEXT_LATCHES.PSR = NEXT_LATCHES.PSR | ((NEXT_LATCHES.N << 2) + (NEXT_LATCHES.Z << 1) + NEXT_LATCHES.P); 
        }
        NEXT_LATCHES.REGS[(CURRENT_LATCHES.IR & 0x0E00) >> 9] = BUS;
    }
    else if(drmux == 1){ //R7
        NEXT_LATCHES.REGS[7] = BUS;
    }
    else { //R6
        int spmux = GetSP_TEMPMUX(CURRENT_LATCHES.MICROINSTRUCTION);
        if(spmux == 1) {
            NEXT_LATCHES.REGS[6] = CURRENT_LATCHES.SSP;
        }
        else {
            NEXT_LATCHES.REGS[6] = BUS;
        } 
    }
  }
  if(ldmar == 1) {
    NEXT_LATCHES.MAR = BUS;
    if(BUS < 0x3000) {
        NEXT_LATCHES.MEMV = 1;
    }
    else {
        NEXT_LATCHES.MEMV = 0;
    }
    if(BUS % 2 != 0) {
        NEXT_LATCHES.UNAL = 1;
    }
    else {
        NEXT_LATCHES.UNAL = 0;
    }
  }
  if(ldmdr == 1) {
    int mio = GetMIO_EN(CURRENT_LATCHES.MICROINSTRUCTION);
    if(mio == 1) { //MEM
        int lsb = Low16bits(MEMORY[CURRENT_LATCHES.MAR / 2][0]);
        int msb = Low16bits(MEMORY[(CURRENT_LATCHES.MAR / 2)][1]);
        msb = msb << 8;
        NEXT_LATCHES.MDR = msb + lsb;
    }
    else { //BUS
        int datasize = GetDATA_SIZE(CURRENT_LATCHES.MICROINSTRUCTION);
        int m0 = CURRENT_LATCHES.MAR & 0x01;
        if(datasize == 0) {
            if(m0 == 0) {
                NEXT_LATCHES.MDR = BUS & 0x00FF;
            }
            else {
                NEXT_LATCHES.MDR = (BUS & 0x00FF) << 8;
            }
        }
        else {
            NEXT_LATCHES.MDR = BUS;
        }
    }
  }
  if(ldir == 1) {
    NEXT_LATCHES.IR = BUS;
  }
  int ldben = GetLD_BEN(CURRENT_LATCHES.MICROINSTRUCTION);
    if(ldben == 1) {
        NEXT_LATCHES.BEN = (((CURRENT_LATCHES.IR & 0x0800) >> 11) & CURRENT_LATCHES.N) + (((CURRENT_LATCHES.IR & 0x0400) >> 10) & CURRENT_LATCHES.Z) + (((CURRENT_LATCHES.IR & 0x0200) >> 9) & CURRENT_LATCHES.P);
    }
    else {
        NEXT_LATCHES.BEN = 0;
    }
  int rw = GetR_W(CURRENT_LATCHES.MICROINSTRUCTION);
  int dsize = GetDATA_SIZE(CURRENT_LATCHES.MICROINSTRUCTION);
  int m0 = CURRENT_LATCHES.MAR & 0x01;
  if(rw == 1) { //write
    if(dsize == 0) {
        if(m0 == 0) {  //WE0
            MEMORY[CURRENT_LATCHES.MAR / 2][0] = CURRENT_LATCHES.MDR;
        }
        else { //WE1
            MEMORY[CURRENT_LATCHES.MAR / 2][1] = CURRENT_LATCHES.MDR >> 8;
        } 
    }   
    else {
        MEMORY[CURRENT_LATCHES.MAR / 2][0] = CURRENT_LATCHES.MDR & 0x00FF;
        MEMORY[CURRENT_LATCHES.MAR / 2][1] = (CURRENT_LATCHES.MDR & 0x0FF00) >> 8;
    }
  }
  if(ldsptemp == 1) {
    NEXT_LATCHES.SSP = BUS;
  }
  if(ldievec == 1) {
    NEXT_LATCHES.IEVEC = BUS;
  }
  if(ldpsr == 1) {
    NEXT_LATCHES.PSR = BUS;
    NEXT_LATCHES.N = BUS & 0x04;
    NEXT_LATCHES.Z = BUS & 0x02;
    NEXT_LATCHES.P = BUS & 0x01;
  }
  if(ldpsr15 == 1) {
    int psrmx = GetPSRMUX(CURRENT_LATCHES.MICROINSTRUCTION);
    if(psrmx == 0) {
        NEXT_LATCHES.PSR = CURRENT_LATCHES.PSR & 0x7FFF;
    }
    else {
        NEXT_LATCHES.PSR = CURRENT_LATCHES.PSR | 0x8000;
    }
  }
}


void latch_datapath_values() {

  /* 
   * Datapath routine for computing all functions that need to latch
   * values in the data path at the end of this cycle.  Some values
   * require sourcing the bus; therefore, this routine has to come 
   * after drive_bus.
   */ 

}
